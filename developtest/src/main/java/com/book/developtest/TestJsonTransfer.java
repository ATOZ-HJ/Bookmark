package com.book.developtest;

import org.apache.commons.lang.StringEscapeUtils;

/**
 * @Author: hj
 * @DateTime: 2020/10/28 17:18
 * @Description:
 */
public class TestJsonTransfer {
    public static void main(String[] args) {
//        String s1 = "{\"strategy_id\":\"9527\",\"strategy_name\":\"策略088\",\"uid\":\"9888\",\"language\":\"python\",\"exchange\":\"DIMPLE\",\"agree_code\":\"Au(T+D)\",\"interval\":\"1m\",\"start_date\":\"2020-07-01 00:00:00\",\"end_date\":\"2020-08-28 00:00:00\",\"handling_rate\":0,\"slip_page\":0,\"multiplier\":300,\"init_capital\":10000000,\"price_tick\":0.1,\"inverse\":\"False\",\"strategy_instance\":\"from vnpy.app.cta_strategy import (\\n    CtaTemplate,\\n    StopOrder,\\n    TickData,\\n    BarData,\\n    TradeData,\\n    OrderData,\\n    BarGenerator,\\n    ArrayManager,\\n)\\n\\n\\nclass DoubleMaStrategy1(CtaTemplate):\\n    author = \\\"用Python的交易员\\\"\\n\\n    fast_window = 10\\n    slow_window = 20\\n\\n    fast_ma0 = 0.0\\n    fast_ma1 = 0.0\\n\\n    slow_ma0 = 0.0\\n    slow_ma1 = 0.0\\n\\n    # parameters = [\\\"fast_window\\\", \\\"slow_window\\\"]\\n    variables = [\\\"fast_ma0\\\", \\\"fast_ma1\\\", \\\"slow_ma0\\\", \\\"slow_ma1\\\"]\\n\\n    def __init__(self, cta_engine, strategy_name, vt_symbol):\\n        \\\"\\\"\\\"\\\"\\\"\\\"\\n        super().__init__(cta_engine, strategy_name, vt_symbol)\\n\\n        self.bg = BarGenerator(self.on_bar)\\n        self.am = ArrayManager()\\n\\n    def on_init(self):\\n        \\\"\\\"\\\"\\n        Callback when strategy is inited.\\n        \\\"\\\"\\\"\\n        self.write_log(\\\"策略初始化\\\")\\n        self.load_bar(10)\\n\\n    def on_start(self):\\n        \\\"\\\"\\\"\\n        Callback when strategy is started.\\n        \\\"\\\"\\\"\\n        self.write_log(\\\"策略启动\\\")\\n        self.put_event()\\n\\n    def on_stop(self):\\n        \\\"\\\"\\\"\\n        Callback when strategy is stopped.\\n        \\\"\\\"\\\"\\n        self.write_log(\\\"策略停止\\\")\\n\\n        self.put_event()\\n\\n    def on_tick(self, tick: TickData):\\n        \\\"\\\"\\\"\\n        Callback of new tick data update.\\n        \\\"\\\"\\\"\\n        self.bg.update_tick(tick)\\n\\n    def on_bar(self, bar: BarData):\\n        \\\"\\\"\\\"\\n        Callback of new bar data update.\\n        \\\"\\\"\\\"\\n\\n        am = self.am\\n        am.update_bar(bar)\\n        if not am.inited:\\n            return\\n\\n        fast_ma = am.sma(self.fast_window, array=True)\\n        self.fast_ma0 = fast_ma[-1]\\n        self.fast_ma1 = fast_ma[-2]\\n\\n        slow_ma = am.sma(self.slow_window, array=True)\\n        self.slow_ma0 = slow_ma[-1]\\n        self.slow_ma1 = slow_ma[-2]\\n\\n        cross_over = self.fast_ma0 > self.slow_ma0 and self.fast_ma1 < self.slow_ma1\\n        cross_below = self.fast_ma0 < self.slow_ma0 and self.fast_ma1 > self.slow_ma1\\n\\n        if cross_over:\\n            if self.pos == 0:\\n                self.buy(bar.close_price, 1)\\n            elif self.pos < 0:\\n                self.cover(bar.close_price, 1)\\n                self.buy(bar.close_price, 1)\\n\\n        elif cross_below:\\n            if self.pos == 0:\\n                self.short(bar.close_price, 1)\\n            elif self.pos > 0:\\n                self.sell(bar.close_price, 1)\\n                self.short(bar.close_price, 1)\\n\\n        self.put_event()\\n\\n    def on_order(self, order: OrderData):\\n        \\\"\\\"\\\"\\n        Callback of new order data update.\\n        \\\"\\\"\\\"\\n        pass\\n\\n    def on_trade(self, trade: TradeData):\\n        \\\"\\\"\\\"\\n        Callback of new trade data update.\\n        \\\"\\\"\\\"\\n        self.put_event()\\n\\n    def on_stop_order(self, stop_order: StopOrder):\\n        \\\"\\\"\\\"\\n        Callback of stop order update.\\n        \\\"\\\"\\\"\\n        pass\\n\",\"jsonp_object\":null,\"backtest_mode\":\"Backtest.Bar\"}";
        String s1 = "sdfdsf \\\\ 2134er32";
        String s = StringEscapeUtils.unescapeJava(s1);
        System.out.println("s = " + s);
    }
}
